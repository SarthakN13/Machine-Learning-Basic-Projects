{
  "cells": [
    {
      "cell_type": "markdown",
      "id": "e28bab98-1acb-4d56-958a-797cb9a80a8b",
      "metadata": {
        "id": "e28bab98-1acb-4d56-958a-797cb9a80a8b"
      },
      "source": [
        "# Practical 4\n",
        "# Name :Sarthak Nahar\n",
        "# Roll No. : 55\n",
        "# Batch : B4\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "ba62472a-c1b1-4e8a-8a10-bac99de802e1",
      "metadata": {
        "id": "ba62472a-c1b1-4e8a-8a10-bac99de802e1"
      },
      "source": [
        "# Principal Component Analysis"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "id": "12ed2b93-7d97-44aa-9d6f-c75875e115ca",
      "metadata": {
        "id": "12ed2b93-7d97-44aa-9d6f-c75875e115ca"
      },
      "outputs": [],
      "source": [
        "# Import libraries\n",
        "import pandas as pd  # Data manipulation\n",
        "import numpy as np  # Numerical operations\n",
        "from sklearn.model_selection import train_test_split  # Split data\n",
        "from sklearn.preprocessing import StandardScaler  # Standardize features\n",
        "from sklearn.decomposition import PCA  # Dimensionality reduction\n",
        "from sklearn.linear_model import LogisticRegression  # Logistic regression model\n",
        "from sklearn.metrics import accuracy_score, classification_report, confusion_matrix  # Model evaluation metrics"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "72995e22-be50-463c-a00e-72b71a1ea0de",
      "metadata": {
        "id": "72995e22-be50-463c-a00e-72b71a1ea0de"
      },
      "source": [
        "# Import Inbuilt Dataset"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "id": "2030a69e-6ede-4a88-9e1c-ab9741ad22aa",
      "metadata": {
        "id": "2030a69e-6ede-4a88-9e1c-ab9741ad22aa"
      },
      "outputs": [],
      "source": [
        "from sklearn.datasets import load_breast_cancer  # Load dataset"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "id": "fa310a51-514b-48db-b31c-9dba8e521815",
      "metadata": {
        "id": "fa310a51-514b-48db-b31c-9dba8e521815"
      },
      "outputs": [],
      "source": [
        "# Load the breast cancer dataset\n",
        "data = load_breast_cancer()  # Load the dataset into a variable\n",
        "\n",
        "# Separate features and target variable\n",
        "X = data.data  # Features (input data)\n",
        "y = data.target  # Target (labels)."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "id": "55ea3a59-b80b-4492-8574-9cd4d86c75c2",
      "metadata": {
        "id": "55ea3a59-b80b-4492-8574-9cd4d86c75c2"
      },
      "outputs": [],
      "source": [
        "# Convert data to DataFrame for easier manipulation\n",
        "# - Create a DataFrame from the features\n",
        "# - Add the target variable to the DataFrame\n",
        "df = pd.DataFrame(X, columns=data.feature_names)  # Create DataFrame from features\n",
        "df['target'] = y  # Add target variable to DataFrame"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "id": "b7a6386c-e739-4743-893e-bf6434a1dee6",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "b7a6386c-e739-4743-893e-bf6434a1dee6",
        "outputId": "13b62959-a31d-45c6-ce16-6ea9e8efc799"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   mean radius  mean texture  mean perimeter  mean area  mean smoothness  \\\n",
            "0        17.99         10.38          122.80     1001.0          0.11840   \n",
            "1        20.57         17.77          132.90     1326.0          0.08474   \n",
            "2        19.69         21.25          130.00     1203.0          0.10960   \n",
            "3        11.42         20.38           77.58      386.1          0.14250   \n",
            "4        20.29         14.34          135.10     1297.0          0.10030   \n",
            "\n",
            "   mean compactness  mean concavity  mean concave points  mean symmetry  \\\n",
            "0           0.27760          0.3001              0.14710         0.2419   \n",
            "1           0.07864          0.0869              0.07017         0.1812   \n",
            "2           0.15990          0.1974              0.12790         0.2069   \n",
            "3           0.28390          0.2414              0.10520         0.2597   \n",
            "4           0.13280          0.1980              0.10430         0.1809   \n",
            "\n",
            "   mean fractal dimension  ...  worst texture  worst perimeter  worst area  \\\n",
            "0                 0.07871  ...          17.33           184.60      2019.0   \n",
            "1                 0.05667  ...          23.41           158.80      1956.0   \n",
            "2                 0.05999  ...          25.53           152.50      1709.0   \n",
            "3                 0.09744  ...          26.50            98.87       567.7   \n",
            "4                 0.05883  ...          16.67           152.20      1575.0   \n",
            "\n",
            "   worst smoothness  worst compactness  worst concavity  worst concave points  \\\n",
            "0            0.1622             0.6656           0.7119                0.2654   \n",
            "1            0.1238             0.1866           0.2416                0.1860   \n",
            "2            0.1444             0.4245           0.4504                0.2430   \n",
            "3            0.2098             0.8663           0.6869                0.2575   \n",
            "4            0.1374             0.2050           0.4000                0.1625   \n",
            "\n",
            "   worst symmetry  worst fractal dimension  target  \n",
            "0          0.4601                  0.11890       0  \n",
            "1          0.2750                  0.08902       0  \n",
            "2          0.3613                  0.08758       0  \n",
            "3          0.6638                  0.17300       0  \n",
            "4          0.2364                  0.07678       0  \n",
            "\n",
            "[5 rows x 31 columns]\n"
          ]
        }
      ],
      "source": [
        "# Display first few rows of the dataset\n",
        "# - Show the first 5 rows to get a glimpse of the data\n",
        "print(df.head())  # Print the first 5 rows of the DataFrame\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "id": "7e291abc-4494-4c0b-8458-d549400b6aaa",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7e291abc-4494-4c0b-8458-d549400b6aaa",
        "outputId": "73880072-55da-4852-80ac-afa9439e141d"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "       mean radius  mean texture  mean perimeter    mean area  \\\n",
            "count   569.000000    569.000000      569.000000   569.000000   \n",
            "mean     14.127292     19.289649       91.969033   654.889104   \n",
            "std       3.524049      4.301036       24.298981   351.914129   \n",
            "min       6.981000      9.710000       43.790000   143.500000   \n",
            "25%      11.700000     16.170000       75.170000   420.300000   \n",
            "50%      13.370000     18.840000       86.240000   551.100000   \n",
            "75%      15.780000     21.800000      104.100000   782.700000   \n",
            "max      28.110000     39.280000      188.500000  2501.000000   \n",
            "\n",
            "       mean smoothness  mean compactness  mean concavity  mean concave points  \\\n",
            "count       569.000000        569.000000      569.000000           569.000000   \n",
            "mean          0.096360          0.104341        0.088799             0.048919   \n",
            "std           0.014064          0.052813        0.079720             0.038803   \n",
            "min           0.052630          0.019380        0.000000             0.000000   \n",
            "25%           0.086370          0.064920        0.029560             0.020310   \n",
            "50%           0.095870          0.092630        0.061540             0.033500   \n",
            "75%           0.105300          0.130400        0.130700             0.074000   \n",
            "max           0.163400          0.345400        0.426800             0.201200   \n",
            "\n",
            "       mean symmetry  mean fractal dimension  ...  worst texture  \\\n",
            "count     569.000000              569.000000  ...     569.000000   \n",
            "mean        0.181162                0.062798  ...      25.677223   \n",
            "std         0.027414                0.007060  ...       6.146258   \n",
            "min         0.106000                0.049960  ...      12.020000   \n",
            "25%         0.161900                0.057700  ...      21.080000   \n",
            "50%         0.179200                0.061540  ...      25.410000   \n",
            "75%         0.195700                0.066120  ...      29.720000   \n",
            "max         0.304000                0.097440  ...      49.540000   \n",
            "\n",
            "       worst perimeter   worst area  worst smoothness  worst compactness  \\\n",
            "count       569.000000   569.000000        569.000000         569.000000   \n",
            "mean        107.261213   880.583128          0.132369           0.254265   \n",
            "std          33.602542   569.356993          0.022832           0.157336   \n",
            "min          50.410000   185.200000          0.071170           0.027290   \n",
            "25%          84.110000   515.300000          0.116600           0.147200   \n",
            "50%          97.660000   686.500000          0.131300           0.211900   \n",
            "75%         125.400000  1084.000000          0.146000           0.339100   \n",
            "max         251.200000  4254.000000          0.222600           1.058000   \n",
            "\n",
            "       worst concavity  worst concave points  worst symmetry  \\\n",
            "count       569.000000            569.000000      569.000000   \n",
            "mean          0.272188              0.114606        0.290076   \n",
            "std           0.208624              0.065732        0.061867   \n",
            "min           0.000000              0.000000        0.156500   \n",
            "25%           0.114500              0.064930        0.250400   \n",
            "50%           0.226700              0.099930        0.282200   \n",
            "75%           0.382900              0.161400        0.317900   \n",
            "max           1.252000              0.291000        0.663800   \n",
            "\n",
            "       worst fractal dimension      target  \n",
            "count               569.000000  569.000000  \n",
            "mean                  0.083946    0.627417  \n",
            "std                   0.018061    0.483918  \n",
            "min                   0.055040    0.000000  \n",
            "25%                   0.071460    0.000000  \n",
            "50%                   0.080040    1.000000  \n",
            "75%                   0.092080    1.000000  \n",
            "max                   0.207500    1.000000  \n",
            "\n",
            "[8 rows x 31 columns]\n"
          ]
        }
      ],
      "source": [
        "# Display basic statistics of the DataFrame\n",
        "# - Provide summary statistics like mean and standard deviation\n",
        "print(df.describe())  # Print summary statistics (count, mean, std, min, max)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "id": "6682b93d-cd7c-4276-8282-ee0904866cad",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6682b93d-cd7c-4276-8282-ee0904866cad",
        "outputId": "dc160127-baef-4f5f-e95d-65d20abf5674"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "target\n",
            "1    357\n",
            "0    212\n",
            "Name: count, dtype: int64\n"
          ]
        }
      ],
      "source": [
        "# Display class distribution (number of samples per class)\n",
        "# - Count how many samples belong to each class\n",
        "print(df['target'].value_counts())  # Print the count of each unique target value"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "id": "e42ea2fe-d8c4-4e14-8c83-0fab812fbd0a",
      "metadata": {
        "id": "e42ea2fe-d8c4-4e14-8c83-0fab812fbd0a"
      },
      "outputs": [],
      "source": [
        "# Split the dataset into training and testing sets\n",
        "# - Use 80% of the data for training and 20% for testing\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "id": "76f7cc8a-0373-4f79-aadc-55cc0a37d125",
      "metadata": {
        "id": "76f7cc8a-0373-4f79-aadc-55cc0a37d125"
      },
      "outputs": [],
      "source": [
        "# Standardize the features\n",
        "# - Scale the features to have a mean of 0 and a standard deviation of 1\n",
        "scaler = StandardScaler()  # Create a scaler object\n",
        "X_train_scaled = scaler.fit_transform(X_train)  # Fit the scaler and transform the training data\n",
        "X_test_scaled = scaler.transform(X_test)  # Transform the test data using the fitted scaler"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "id": "f7bbc3e3-08e8-43e7-b7af-5dfdceb8e03a",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 74
        },
        "id": "f7bbc3e3-08e8-43e7-b7af-5dfdceb8e03a",
        "outputId": "d79645e5-b093-4987-de66-3aaa3095d36c"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LogisticRegression(max_iter=1000)"
            ],
            "text/html": [
              "<style>#sk-container-id-1 {color: black;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression(max_iter=1000)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression(max_iter=1000)</pre></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ],
      "source": [
        "# Initialize and train the logistic regression model\n",
        "# - Create a logistic regression model with a maximum of 1000 iterations\n",
        "log_reg = LogisticRegression(max_iter=1000)  # Initialize model\n",
        "log_reg.fit(X_train_scaled, y_train)  # Train the model on the scaled training data"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 11,
      "id": "0f380ee9-adf0-48e2-ad44-016ab2c8fe5b",
      "metadata": {
        "id": "0f380ee9-adf0-48e2-ad44-016ab2c8fe5b"
      },
      "outputs": [],
      "source": [
        "# Make predictions\n",
        "# - Use the trained model to predict labels for the test set\n",
        "y_pred = log_reg.predict(X_test_scaled)  # Predict on the scaled test data"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 12,
      "id": "7e93a47f-f12f-4588-aa7a-453584558338",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7e93a47f-f12f-4588-aa7a-453584558338",
        "outputId": "4a5c1f0b-909e-4b97-cbc3-92f1629eceb1"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy without PCA: 0.9736842105263158\n",
            "Classification Report without PCA:\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       0.98      0.95      0.96        43\n",
            "           1       0.97      0.99      0.98        71\n",
            "\n",
            "    accuracy                           0.97       114\n",
            "   macro avg       0.97      0.97      0.97       114\n",
            "weighted avg       0.97      0.97      0.97       114\n",
            "\n",
            "Confusion Matrix without PCA:\n",
            " [[41  2]\n",
            " [ 1 70]]\n"
          ]
        }
      ],
      "source": [
        "# Evaluate the performance\n",
        "# - Calculate and display the accuracy of the model\n",
        "print(\"Accuracy without PCA:\", accuracy_score(y_test, y_pred))  # Print accuracy score\n",
        "# - Show detailed classification metrics (precision, recall, F1-score)\n",
        "print(\"Classification Report without PCA:\\n\", classification_report(y_test, y_pred))  # Print classification report\n",
        "# - Display the confusion matrix to visualize true vs. predicted labels\n",
        "print(\"Confusion Matrix without PCA:\\n\", confusion_matrix(y_test, y_pred))  # Print confusion matrix"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 13,
      "id": "204ebe72-a446-493e-959e-42be6c6ce14e",
      "metadata": {
        "id": "204ebe72-a446-493e-959e-42be6c6ce14e"
      },
      "outputs": [],
      "source": [
        "# Apply PCA\n",
        "# - Reduce the dimensionality of the data while preserving 95% of the variance\n",
        "pca = PCA(n_components=0.95)  # Initialize PCA to preserve 95% of variance\n",
        "X_train_pca = pca.fit_transform(X_train_scaled)  # Fit PCA on training data and transform\n",
        "X_test_pca = pca.transform(X_test_scaled)  # Transform the test data using the fitted PCA"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 14,
      "id": "c2aa1396-6f47-481d-8340-9e962a7a6e07",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "c2aa1396-6f47-481d-8340-9e962a7a6e07",
        "outputId": "8263d287-cae2-42d9-e91a-79d4dc0c0969"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Explained Variance Ratio: [0.43502782 0.19500007 0.09781519 0.06486409 0.05253378 0.041128\n",
            " 0.0223559  0.01647952 0.01380052 0.01205262]\n",
            "Number of Components: 10\n"
          ]
        }
      ],
      "source": [
        "# Display explained variance\n",
        "# - Show how much of the original variance is retained by the PCA components\n",
        "print(\"Explained Variance Ratio:\", pca.explained_variance_ratio_)  # Print the explained variance ratio\n",
        "# - Print the number of components that preserve 95% of the variance\n",
        "print(\"Number of Components:\", pca.n_components_)  # Print the number of components"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 15,
      "id": "9ad757b8-3d23-470b-a2b1-3c59b7eda728",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 74
        },
        "id": "9ad757b8-3d23-470b-a2b1-3c59b7eda728",
        "outputId": "416b3b76-3dc6-4b78-a3e8-9295791a60ee"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LogisticRegression(max_iter=1000)"
            ],
            "text/html": [
              "<style>#sk-container-id-2 {color: black;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression(max_iter=1000)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression(max_iter=1000)</pre></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ],
      "source": [
        "# Train logistic regression on PCA data\n",
        "log_reg_pca = LogisticRegression(max_iter=1000)  # Create model\n",
        "log_reg_pca.fit(X_train_pca, y_train)  # Fit model to training data"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 16,
      "id": "0ce1d66b-6455-4c74-8c9f-d98e0577a40d",
      "metadata": {
        "id": "0ce1d66b-6455-4c74-8c9f-d98e0577a40d"
      },
      "outputs": [],
      "source": [
        "# Make predictions\n",
        "y_pred_pca = log_reg_pca.predict(X_test_pca)  # Predict on test data"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 17,
      "id": "4d397186-1a9e-41c6-92d3-96d78c778974",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4d397186-1a9e-41c6-92d3-96d78c778974",
        "outputId": "3fbe1185-3ce7-4fbb-e79b-41dd3dd9af90"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy with PCA: 0.9824561403508771\n",
            "Classification Report with PCA:\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       0.98      0.98      0.98        43\n",
            "           1       0.99      0.99      0.99        71\n",
            "\n",
            "    accuracy                           0.98       114\n",
            "   macro avg       0.98      0.98      0.98       114\n",
            "weighted avg       0.98      0.98      0.98       114\n",
            "\n",
            "Confusion Matrix with PCA:\n",
            " [[42  1]\n",
            " [ 1 70]]\n"
          ]
        }
      ],
      "source": [
        "# Evaluate performance\n",
        "print(\"Accuracy with PCA:\", accuracy_score(y_test, y_pred_pca))  # Show accuracy\n",
        "print(\"Classification Report with PCA:\\n\", classification_report(y_test, y_pred_pca))  # Show detailed metrics\n",
        "print(\"Confusion Matrix with PCA:\\n\", confusion_matrix(y_test, y_pred_pca))  # Show confusion matrix"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "9274bef8-d053-4ec0-9420-9f72da2e1e2b",
      "metadata": {
        "id": "9274bef8-d053-4ec0-9420-9f72da2e1e2b"
      },
      "source": [
        "Impact of PCA on Performance:\n",
        "PCA helps in reducing the number of features while keeping most of the original data's important information. This can make the model simpler and faster, especially if the dataset had many features.\n",
        "Reducing dimensions might cause a loss of some information, which could affect the model's performance. It's good to compare the performance before and after applying PCA to see how it impacts the model.\n",
        "Data Standardization:\n",
        "Scaling the features to have a mean of 0 and a standard deviation of 1 is crucial before applying PCA and logistic regression. This ensures that all features are treated equally and contribute to the model in a fair manner.\n",
        "PCA Explained Variance:\n",
        "By setting n_components=0.95, you're telling PCA to keep the features that account for 95% of the variance in the dataset. This helps you understand how much of the original information is preserved after reducing the dimensions.\n",
        "Model Evaluation Metrics:\n",
        "Accuracy is a good overall measure of how well the model is performing, but it might not tell the whole story if the classes are imbalanced.\n",
        "Precision, recall, and F1-score provide more detailed insights into the model's performance, especially when dealing with imbalanced datasets.\n",
        "The confusion matrix helps you identify specific errors made by the model and gives you a clear picture of how the model is performing for each class.\n",
        "Dimensionality Reduction Benefits:\n",
        "PCA can significantly reduce the computational cost by decreasing the number of features, which is very helpful when working with large datasets.\n",
        "Reducing the number of features can also help prevent overfitting, especially if the original dataset has many features but a limited number of samples."
      ]
    },
    {
      "cell_type": "markdown",
      "id": "18ae2bf6-c09f-4b4c-b1ef-9a960ca24497",
      "metadata": {
        "id": "18ae2bf6-c09f-4b4c-b1ef-9a960ca24497"
      },
      "source": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.11.5"
    },
    "colab": {
      "provenance": []
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}
